---
import { commentConfig } from "@/config";

interface Props {
	path: string;
}

const config = {
	...commentConfig.twikoo,
	el: "#tcomment",
	path: Astro.props.path,
};
---

<div id="tcomment"></div>
<script is:inline src="/assets/js/twikoo.all.min.js"></script>
<script is:inline define:vars={{ config }}>
  // 获取当前页面路径的函数
  function getCurrentPath() {
    const pathname = window.location.pathname;
    // 移除末尾的斜杠（如果存在）
    return pathname.endsWith('/') && pathname.length > 1 ? pathname.slice(0, -1) : pathname;
  }
  
  // 动态创建配置对象的函数
  function createTwikooConfig() {
    return {
      ...config,
      path: getCurrentPath(),
      el: '#tcomment',
    };
  }
  
  // 初始化 Twikoo 的函数
  function initTwikooWithRetry() {
    let retryCount = 0;
    const maxRetries = 3;
    
    function initTwikoo() {
      if (typeof twikoo !== 'undefined') {
        // 清空现有评论容器
        const commentEl = document.getElementById('tcomment');
        if (commentEl) {
          commentEl.innerHTML = '';
        }
        
        // 使用动态配置初始化 Twikoo
        const dynamicConfig = createTwikooConfig();
        console.log('Twikoo 初始化配置:', dynamicConfig);
        twikoo.init(dynamicConfig);
      } else if (retryCount < maxRetries) {
        retryCount++;
        console.log(`Twikoo 加载重试 ${retryCount}/${maxRetries}...`);
        setTimeout(initTwikoo, 500); // 500ms 后重试
      } else {
        console.error('Twikoo 加载失败，请刷新页面重试');
      }
    }
    
    initTwikoo();
  }
  // 在评论容器内拦截会导致滚动到顶部的点击
  function setupCommentClickGuards() {
    const commentEl = document.getElementById('tcomment');
    if (!commentEl) return;

    // 捕获阶段拦截，优先于 Swup 的 link:click 处理
    const guard = function (event) {
      const target = event.target;
      const anchor = target && typeof target.closest === 'function' ? target.closest('a') : null;

      // 标记点击来源于评论区，供全局逻辑判断
      window.__clickInComment = true;
      window.__lastCommentInteractionTs = Date.now();
      setTimeout(() => { window.__clickInComment = false; }, 800);

      // 1) 拦截锚点链接，避免浏览器滚动到顶部/Swup接管
      if (anchor) {
        const href = anchor.getAttribute('href') || '';
        if (href === '' || href === '#' || href === '#!' || href.startsWith('#')) {
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation?.();
          return;
        }
      }

      // 2) 拦截位于表单内的 button 默认提交（like/评论按钮若未声明 type 会触发表单提交）
      const button = target && typeof target.closest === 'function' ? target.closest('button') : null;
      if (button) {
        const form = typeof button.closest === 'function' ? button.closest('form') : null;
        if (form) {
          event.preventDefault();
          // 不阻止冒泡，交给 Twikoo 的 JS 处理内部逻辑
        }
      }
    };

    commentEl.addEventListener('click', guard, { capture: true });

    // 3) 捕获表单提交，若 action 为空或锚点，阻止浏览器默认跳转导致回顶
    const submitGuard = function (event) {
      const form = event.target as HTMLFormElement | undefined;
      if (!form) return;
      const action = (form.getAttribute && form.getAttribute('action')) || '';
      window.__clickInComment = true;
      window.__lastCommentInteractionTs = Date.now();
      setTimeout(() => { window.__clickInComment = false; }, 800);
      if (action === '' || action === '#' || action.startsWith('#')) {
        event.preventDefault();
        // 不阻止冒泡，让 Twikoo 自身的提交逻辑继续运行
      }
    } as EventListener;
    commentEl.addEventListener('submit', submitGuard, { capture: true });
  }

  // 页面首次加载时初始化（若DOMContentLoaded已触发则立即执行）
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initTwikooWithRetry();
      setupCommentClickGuards();
    });
  } else {
    initTwikooWithRetry();
    setupCommentClickGuards();
  }
  
  // 监听 Swup 页面切换事件，在内容替换后重新初始化 Twikoo
  function setupSwupHooks() {
    if (window.swup && window.swup.hooks) {
      // 在页面内容替换后重新初始化
      window.swup.hooks.on('content:replace', function() {
        // 延迟执行以确保 DOM 已完全更新
        setTimeout(function() {
          const commentEl = document.getElementById('tcomment');
          if (commentEl) {
            console.log('Swup 页面切换后重新初始化 Twikoo，当前路径:', getCurrentPath());
            initTwikooWithRetry();
            setupCommentClickGuards();
          }
        }, 200);
      });
      
      // 在页面访问开始时清理旧的评论数据
      window.swup.hooks.on('visit:start', function() {
        const commentEl = document.getElementById('tcomment');
        if (commentEl) {
          commentEl.innerHTML = '';
          console.log('页面切换开始，清理评论容器');
        }
      });
    }
  }
  
  // 设置 Swup 钩子
  if (window.swup) {
    setupSwupHooks();
  } else {
    document.addEventListener('swup:enable', setupSwupHooks);
  }
  
  // 监听自定义事件，在页面完全加载后重新初始化 Twikoo
  document.addEventListener('mizuki:page:loaded', function(event) {
    const eventDetail = event.detail || {};
    console.log('Mizuki 页面加载完成事件触发，路径:', eventDetail.path, '时间戳:', eventDetail.timestamp);
    
    const commentEl = document.getElementById('tcomment');
    if (commentEl) {
      // 确保在自定义事件触发时也使用最新的路径
      console.log('通过自定义事件重新初始化 Twikoo，当前路径:', getCurrentPath());
      initTwikooWithRetry();
    }
  });
</script>
